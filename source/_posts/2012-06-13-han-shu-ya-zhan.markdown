---
layout: post
title: "函数压栈的一些思考"
date: 2012-06-13 07:22
comments: true
categories: software
tags: [stack ,function]
keywords: stack ,function,函数压栈
description: 函数压栈。Function push。
---
今天，有个同学跑过来问我一个问题fun（i，i++，++i），我立马想到这个是跟函数压栈的顺序有关的，随后去网上查找资料，并开始写了一些测试实验。

先把cu上的一个解释先贴上来：

函数调用约定（Calling Convention）
<!--more-->
函数调用约定不仅决定了发生函数调用时函数参数的入栈顺序，还决定了是由调用者函数还是被调用函数负责清除栈中的参数，还原堆栈。函数调用约定有很多方 式，除了常见的\_\_cdecl，\_\_fastcall和\_\_stdcall之外，C++的编译器还支持thiscall方式，不少C/C++编译器还支持 naked call方式。这么多函数调用约定常常令许多程序员很迷惑，到底它们是怎么回事，都是在什么情况下使用呢？下面就分别介绍这几种函数调用约定。
>
 **1、\_\_stdcall调用约定**   
  相当于16位动态库中经常使用的PASCAL调用约定。在32位的VC++5.0中PASCAL调用约定不再被支持（实际上它已被定义为\_\_stdcall。除了\_\_pascal外，\_\_fortran和\_\_syscall也不被支持），取而代之的是\_\_stdcall调用约定。两者实质上是一致的，即函数的参数自右向左通过栈传递，被调用的函数在返回前清理传送参数的内存栈，但不同的是函数名的修饰部分（关于函数名的修饰部分在后面将详细说明）。 _stdcall是Pascal程序的缺省调用方式，通常用于Win32   Api中，函数采用从右到左的压栈方式，自己在退出时清空堆栈。VC将函数编译后会在函数名前面加上下划线前缀，在函数名后加上 "@ "和参数的字节数。   
 **2、C调用约定**   
  （即用\_\_cdecl关键字说明）按从右至左的顺序压参数入栈，由调用者把参数弹出栈。对于传送参数的内存栈是由调用者来维护的（正因为如此，实现可变参数的函数只能使用该调用约定）。另外，在函数名修饰约定方面也有所不同。
 _cdecl是C和C＋＋程序的缺省调用方式。每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用_stdcall函数的大。函数采用从右到左的压栈方式。VC将函数编译后会在函数名前面加上下划线前缀。是MFC缺省调用约定。   
**3、\_\_fastcall调用约定**   
  是 "人 "如其名，它的主要特点就是快，因为它是通过寄存器来传送参数的（实际上，它用ECX和EDX传送前两个双字（DWORD）或更小的参数，剩下的参数仍旧自右向左压栈传送，被调用的函数在返回前清理传送参数的内存栈），在函数名修饰约定方面，它和前两者均不同。
 _fastcall方式的函数采用寄存器传递参数，VC将函数编译后会在函数名前面加上 "@ "前缀，在函数名后加上 "@ "和参数的字节数。   
**4、thiscall**   
  仅仅应用于 "C++ "成员函数。this指针存放于CX寄存器，参数从右到左压。thiscall不是关键词，因此不能被程序员指定。   
 **5、naked   call**   
  采用1-4的调用约定时，如果必要的话，进入函数时编译器会产生代码来保存ESI，EDI，EBX，EBP寄存器，退出函数时则产生代码恢复这些寄存器的内容。
naked   call不产生这样的代码。naked   call不是类型修饰符，故必须和_declspec共同使用。
关键字\_\_stdcall \_\_cdecl和 \_\_fastcall可以直接加在要输出的函数前，也可以在编译环境的Setting...\C/C++   \Code   Generation项选择。当加在输出函数前的关键字与编译环境中的选择不同时，直接加在输出函数前的关键字有效。它们对应的命令行参数分别为/Gz、/Gd和/Gr。缺省状态为/Gd，即\_\_cdecl。
要完全模仿PASCAL调用约定首先必须使用\_\_stdcall调用约定，至于函数名修饰约定，可以通过其它方法模仿。还有一个值得一提的是WINAPI宏，Windows.h支持该宏，它可以将出函数翻译成适当的调用约定，在WIN32中，它被定义为\_\_stdcall。使用WINAPI宏可以创建自己的APIs 。
>
VC的编译环境默认是使用\_\_cdecl调用约定，也可以在编译环境的Project Setting...菜单－》C/C++ ＝》Code    Generation项选择设置函数调用约定。也可以直接在函数声明前添加关键字\_\_stdcall、\_\_cdecl或\_\_fastcall等单独确定函 数的调用方式。在Windows系统上开发软件常用到WINAPI宏，它可以根据编译设置翻译成适当的函数调用约定，在WIN32中，它被定义为 \_\_stdcall。

下面是华为某年的一个考题，

设
``` c
int arr[]={6,7,8,9,10};

int *ptr=arr;

*(ptr++)+=123;

printf(＂%d,%d＂,*ptr,*(++ptr));

```
答案为什么是：8，8
``` c

int arr[]={6,7,8,9,10};

int *ptr=arr;//现在ptr指向6

*(ptr++)+=123;//现在ptr指向7,第一个元素变为129

printf(＂%d,%d＂,*ptr,*(++ptr)); //考虑从右往左计算，先是*(++ptr)，现在ptr指向8，然后*ptr也是8，输出8，8
```

嗯 虽然这样解释似乎有些道理，但是有人认为这是和编译器相关的，即，求值顺序是不定的。。也有可能出现7，8的结果。

 